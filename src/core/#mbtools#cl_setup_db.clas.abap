CLASS /mbtools/cl_setup_db DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

************************************************************************
* Marc Bernard Tools - Setup Database
*
* Copyright 2021 Marc Bernard <https://marcbernardtools.com/>
* SPDX-License-Identifier: GPL-3.0-only
************************************************************************
  PUBLIC SECTION.

    CONSTANTS:
      c_tabname     TYPE tabname VALUE 'ZMBTINST' ##NO_TEXT,
      c_lock        TYPE viewname VALUE 'EZMBTINST' ##NO_TEXT,
      c_english     TYPE sy-langu VALUE 'E' ##NO_TEXT,
      " Avoids warning due to key length
      c_name_length TYPE i VALUE 90 ##NO_TEXT.

    CLASS-METHODS install
      IMPORTING
        !iv_tabname TYPE tabname DEFAULT c_tabname
        !iv_lock    TYPE viewname DEFAULT c_lock
        !iv_text    TYPE ddtext DEFAULT 'Generated by MBT'
      RAISING
        /mbtools/cx_exception.

  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-DATA:
      gv_text    TYPE string,
      gv_tabname TYPE tabname,
      gv_lock    TYPE viewname.

    CLASS-METHODS _table_create
      RAISING
        /mbtools/cx_exception.

    CLASS-METHODS _table_exists
      RETURNING
        VALUE(rv_exists) TYPE abap_bool.

    CLASS-METHODS _lock_create
      RAISING
        /mbtools/cx_exception.

    CLASS-METHODS _lock_exists
      RETURNING
        VALUE(rv_exists) TYPE abap_bool.

    CLASS-METHODS _get_package
      RETURNING
        VALUE(rv_package) TYPE devclass.

ENDCLASS.



CLASS /mbtools/cl_setup_db IMPLEMENTATION.


  METHOD install.

    gv_tabname = iv_tabname.
    gv_lock    = iv_lock.
    gv_text    = iv_text.

    IF _table_exists( ) = abap_false.
      _table_create( ).
    ENDIF.

    IF _lock_exists( ) = abap_false.
      _lock_create( ).
    ENDIF.

  ENDMETHOD.


  METHOD _get_package.

    IF sy-cprog CA '/'.
      " Fallback for namespaced installer
      rv_package = '$TMP'.
    ELSE.
      " Get package of main program
      SELECT SINGLE devclass FROM tadir INTO rv_package
        WHERE pgmid = 'R3TR' AND object = 'PROG' AND obj_name = sy-cprog.
      IF sy-subrc <> 0.
        rv_package = '$TMP'. " Fallback
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD _lock_create.

    DATA:
      lv_name  TYPE tadir-obj_name,
      lv_pack  TYPE devclass,
      ls_dd25v TYPE dd25v,
      lt_dd26e TYPE STANDARD TABLE OF dd26e WITH DEFAULT KEY,
      lt_dd27p TYPE STANDARD TABLE OF dd27p WITH DEFAULT KEY.

    FIELD-SYMBOLS:
      <ls_dd26e> LIKE LINE OF lt_dd26e,
      <ls_dd27p> LIKE LINE OF lt_dd27p.

    ls_dd25v-viewname   = gv_lock.
    ls_dd25v-aggtype    = 'E'.
    ls_dd25v-roottab    = gv_tabname.
    ls_dd25v-ddlanguage = c_english.
    ls_dd25v-ddtext     = gv_text && ' - Lock'.

    APPEND INITIAL LINE TO lt_dd26e ASSIGNING <ls_dd26e>.
    <ls_dd26e>-viewname   = ls_dd25v-viewname.
    <ls_dd26e>-tabname    = ls_dd25v-roottab.
    <ls_dd26e>-tabpos     = '0001'.
    <ls_dd26e>-fortabname = ls_dd25v-roottab.
    <ls_dd26e>-enqmode    = 'E'.

    APPEND INITIAL LINE TO lt_dd27p ASSIGNING <ls_dd27p>.
    <ls_dd27p>-viewname  = ls_dd25v-viewname.
    <ls_dd27p>-objpos    = '0001'.
    <ls_dd27p>-viewfield = 'NAME'.
    <ls_dd27p>-tabname   = ls_dd25v-roottab.
    <ls_dd27p>-fieldname = 'NAME'.
    <ls_dd27p>-keyflag   = abap_true.

    APPEND INITIAL LINE TO lt_dd27p ASSIGNING <ls_dd27p>.
    <ls_dd27p>-viewname  = ls_dd25v-viewname.
    <ls_dd27p>-objpos    = '0002'.
    <ls_dd27p>-viewfield = 'PACK'.
    <ls_dd27p>-tabname   = ls_dd25v-roottab.
    <ls_dd27p>-fieldname = 'PACK'.
    <ls_dd27p>-keyflag   = abap_true.

    CALL FUNCTION 'DDIF_ENQU_PUT'
      EXPORTING
        name              = ls_dd25v-viewname
        dd25v_wa          = ls_dd25v
      TABLES
        dd26e_tab         = lt_dd26e
        dd27p_tab         = lt_dd27p
      EXCEPTIONS
        enqu_not_found    = 1
        name_inconsistent = 2
        enqu_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc <> 0.
      /mbtools/cx_exception=>raise( |Setup failed: Creating enqueue { ls_dd25v-viewname }| ).
    ENDIF.

    lv_name = ls_dd25v-viewname.
    lv_pack = _get_package( ).

    CALL FUNCTION 'TR_TADIR_INTERFACE'
      EXPORTING
        wi_tadir_pgmid    = 'R3TR'
        wi_tadir_object   = 'ENQU'
        wi_tadir_obj_name = lv_name
        wi_set_genflag    = abap_true
        wi_test_modus     = abap_false
        wi_tadir_devclass = lv_pack
      EXCEPTIONS
        OTHERS            = 1.
    IF sy-subrc <> 0.
      /mbtools/cx_exception=>raise( |Setup failed: TADIR for { ls_dd25v-viewname }| ).
    ENDIF.

    CALL FUNCTION 'DDIF_ENQU_ACTIVATE'
      EXPORTING
        name        = ls_dd25v-viewname
      EXCEPTIONS
        not_found   = 1
        put_failure = 2
        OTHERS      = 3.
    IF sy-subrc <> 0.
      /mbtools/cx_exception=>raise( |Setup failed: Activating enqueue { ls_dd25v-viewname }| ).
    ENDIF.

  ENDMETHOD.


  METHOD _lock_exists.

    DATA: lv_viewname TYPE dd25l-viewname.

    SELECT SINGLE viewname FROM dd25l INTO lv_viewname WHERE viewname = gv_lock ##WARN_OK.
    rv_exists = boolc( sy-subrc = 0 ).

  ENDMETHOD.


  METHOD _table_create.

    DATA:
      lv_name  TYPE tadir-obj_name,
      lv_pack  TYPE devclass,
      lv_rc    TYPE sy-subrc,
      ls_dd02v TYPE dd02v,
      ls_dd09l TYPE dd09l,
      lt_dd03p TYPE STANDARD TABLE OF dd03p WITH DEFAULT KEY.

    FIELD-SYMBOLS:
      <ls_dd03p> LIKE LINE OF lt_dd03p.

    ls_dd02v-tabname    = gv_tabname.
    ls_dd02v-ddlanguage = c_english.
    ls_dd02v-tabclass   = 'TRANSP'.
    ls_dd02v-ddtext     = gv_text && ' - Persistence'.
    ls_dd02v-contflag   = 'A'.
    ls_dd02v-exclass    = '1'.

    ls_dd09l-tabname  = ls_dd02v-tabname.
    ls_dd09l-as4local = 'A'.
    ls_dd09l-tabkat   = '1'.
    ls_dd09l-tabart   = 'APPL1'.
    ls_dd09l-bufallow = 'N'.

    APPEND INITIAL LINE TO lt_dd03p ASSIGNING <ls_dd03p>.
    <ls_dd03p>-tabname   = ls_dd02v-tabname.
    <ls_dd03p>-fieldname = 'NAME'.
    <ls_dd03p>-position  = '0001'.
    <ls_dd03p>-keyflag   = abap_true.
    <ls_dd03p>-notnull   = abap_true.
    <ls_dd03p>-datatype  = 'CHAR'.
    <ls_dd03p>-leng      = c_name_length.

    APPEND INITIAL LINE TO lt_dd03p ASSIGNING <ls_dd03p>.
    <ls_dd03p>-tabname   = ls_dd02v-tabname.
    <ls_dd03p>-fieldname = 'PACK'.
    <ls_dd03p>-position  = '0002'.
    <ls_dd03p>-keyflag   = abap_true.
    <ls_dd03p>-notnull   = abap_true.
    <ls_dd03p>-rollname  = 'DEVCLASS'.

    APPEND INITIAL LINE TO lt_dd03p ASSIGNING <ls_dd03p>.
    <ls_dd03p>-tabname   = ls_dd02v-tabname.
    <ls_dd03p>-fieldname = 'JSON'.
    <ls_dd03p>-position  = '0003'.
    <ls_dd03p>-datatype  = 'STRG'.

    CALL FUNCTION 'DDIF_TABL_PUT'
      EXPORTING
        name              = ls_dd02v-tabname
        dd02v_wa          = ls_dd02v
        dd09l_wa          = ls_dd09l
      TABLES
        dd03p_tab         = lt_dd03p
      EXCEPTIONS
        tabl_not_found    = 1
        name_inconsistent = 2
        tabl_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc <> 0.
      /mbtools/cx_exception=>raise( |Setup failed: Creating table { ls_dd02v-tabname }| ).
    ENDIF.

    lv_name = ls_dd02v-tabname.
    lv_pack = _get_package( ).

    CALL FUNCTION 'TR_TADIR_INTERFACE'
      EXPORTING
        wi_tadir_pgmid    = 'R3TR'
        wi_tadir_object   = 'TABL'
        wi_tadir_obj_name = lv_name
        wi_set_genflag    = abap_true
        wi_test_modus     = abap_false
        wi_tadir_devclass = lv_pack
      EXCEPTIONS
        OTHERS            = 1.
    IF sy-subrc <> 0.
      /mbtools/cx_exception=>raise( |Setup failed: TADIR for { ls_dd02v-tabname }| ).
    ENDIF.

    CALL FUNCTION 'DDIF_TABL_ACTIVATE'
      EXPORTING
        name        = ls_dd02v-tabname
        auth_chk    = abap_false
      IMPORTING
        rc          = lv_rc
      EXCEPTIONS
        not_found   = 1
        put_failure = 2
        OTHERS      = 3.
    IF sy-subrc <> 0 OR lv_rc <> 0.
      /mbtools/cx_exception=>raise( |Setup failed: Activating table { ls_dd02v-tabname }| ).
    ENDIF.

  ENDMETHOD.


  METHOD _table_exists.

    DATA: lv_tabname TYPE dd02l-tabname.

    SELECT SINGLE tabname FROM dd02l INTO lv_tabname WHERE tabname = gv_tabname ##WARN_OK.
    rv_exists = boolc( sy-subrc = 0 ).

  ENDMETHOD.
ENDCLASS.
